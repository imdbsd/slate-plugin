[{"/Users/temporary/Works/personal/slate-plugin/playground/src/SlateMentionPlugin.stories.tsx":"1","/Users/temporary/Works/personal/slate-plugin/playground/src/SlatePasteUrl.stories.tsx":"2","/Users/temporary/Works/personal/slate-plugin/playground/src/SlateStringDeserialize.stories.tsx":"3","/Users/temporary/Works/personal/slate-plugin/playground/src/SlateStringDeserialize.tsx":"4","/Users/temporary/Works/personal/slate-plugin/playground/src/SlatePasteUrl.tsx":"5","/Users/temporary/Works/personal/slate-plugin/playground/src/SlateMentionPlugin.tsx":"6"},{"size":326,"mtime":1609569098831,"results":"7","hashOfConfig":"8"},{"size":444,"mtime":1609567894988,"results":"9","hashOfConfig":"8"},{"size":543,"mtime":1609054016105,"results":"10","hashOfConfig":"8"},{"size":788,"mtime":1609054016105,"results":"11","hashOfConfig":"8"},{"size":2425,"mtime":1609567894989,"results":"12","hashOfConfig":"8"},{"size":1188,"mtime":1609772574601,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1wli3a0",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/temporary/Works/personal/slate-plugin/playground/src/SlateMentionPlugin.stories.tsx",[],["28","29"],"/Users/temporary/Works/personal/slate-plugin/playground/src/SlatePasteUrl.stories.tsx",[],"/Users/temporary/Works/personal/slate-plugin/playground/src/SlateStringDeserialize.stories.tsx",[],"/Users/temporary/Works/personal/slate-plugin/playground/src/SlateStringDeserialize.tsx",[],"/Users/temporary/Works/personal/slate-plugin/playground/src/SlatePasteUrl.tsx",["30"],"import {useState, useMemo, FC} from 'react'\nimport {createEditor, Node} from 'slate'\nimport {Slate, Editable, withReact, DefaultElement} from 'slate-react'\nimport {usePasteUrl, Options} from 'slate-paste-url-plugin'\n\nexport type Props = {\n  defaultType?: string\n  patterns?:\n    | {capture: string; type?: string}\n    | {capture: string; type?: string}[]\n}\n\nconst Editor: FC<Props> = (props) => {\n  const options: Options = {\n    defaultType: props.defaultType,\n    patterns: props.patterns\n      ? Array.isArray(props.patterns)\n        ? props.patterns.map((pattern) => ({\n            type: pattern.type,\n            capture: new RegExp(pattern.capture, 'i'),\n          }))\n        : {\n            type: props.patterns.type,\n            capture: new RegExp(props.patterns.capture, 'i'),\n          }\n      : undefined,\n  }\n  const withPasteUrl = usePasteUrl(options)\n  const editor = useMemo(() => withPasteUrl(withReact(createEditor())), [])\n  const [value, setValue] = useState<Node[]>([\n    {\n      type: 'paragraph',\n      children: [\n        {\n          text: `Slate paste url example, try block some text and paste url or github url to the blocked text.\n            `,\n        },\n      ],\n    },\n    {\n      type: 'paragraph',\n      children: [\n        {\n          text:\n            'To change how the url rendered, edit the renderElement in SlatePasteUrl.tsx',\n        },\n      ],\n    },\n  ])\n\n  return (\n    <Slate\n      editor={editor}\n      value={value}\n      onChange={(newValue) => setValue(newValue)}\n    >\n      <Editable\n        renderElement={(props) => {\n          switch (props.element.type) {\n            case 'link': {\n              return (\n                <a\n                  href={props.element.link as string}\n                  style={{fontWeight: 'bold'}}\n                  {...props.attributes}\n                >\n                  {props.children}\n                </a>\n              )\n            }\n            case 'github_link': {\n              return (\n                <a\n                  href={props.element.link as string}\n                  style={{fontWeight: 'bold', color: 'blue'}}\n                  {...props.attributes}\n                >\n                  {props.children}\n                </a>\n              )\n            }\n            default: {\n              return <DefaultElement {...props} />\n            }\n          }\n        }}\n      />\n    </Slate>\n  )\n}\n\nexport default Editor\n","/Users/temporary/Works/personal/slate-plugin/playground/src/SlateMentionPlugin.tsx",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":29,"column":73,"nodeType":"37","endLine":29,"endColumn":75,"suggestions":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'withPasteUrl'. Either include it or remove the dependency array.","ArrayExpression",["41"],"no-global-assign","no-unsafe-negation",{"desc":"42","fix":"43"},"Update the dependencies array to be: [withPasteUrl]",{"range":"44","text":"45"},[939,941],"[withPasteUrl]"]